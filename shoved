#!/bin/bash

set -euo pipefail

NAMES=~/.shoved.names
VERSION=0.3.1

shoved::setup() {
    cat <<\!
        d()  { eval "$(shoved chdir "${1:-}")"; }
        dl() { eval "dirs -v"; }
        dn() { eval "$(shoved name "${1:-}" $(dirs))"; }
        dp() { eval "$(shoved pushpop "${1:-}")"; }
        dx() { eval "$(shoved exch)"; }
        ds() { eval "$(shoved setup)"; }
!
    for i in $(seq 0 9); do
        echo "alias $i='d $i'"
    done
}

shoved::chdir() {
    if [[ $1 == "" ]]; then
        echo pwd
    elif [[ $1 =~ ^[0-9]$ ]]; then
        # d N does pushd +N
        _move "pushd +$1" ""
    else
        _move "cd %s" $1
    fi
}

shoved::exch() {
    _move "pushd" ""
}

shoved::pushpop() {
    if [[ $1 == "" ]]; then
        _move "popd" ""
    else
        _move "pushd %s" $1
    fi
}

shoved::name() {
    if [[ $1 == "" ]]; then
        if [[ -e $NAMES ]]; then
            local maxlen=$(awk '{ x = x > length($1) ? x : length($1) } END { print x }' <$NAMES)
            echo "awk '{ printf(\" %-${maxlen}s  %s\\n\", \$1, \$2) }' <$NAMES | sort -k1"
        else
            echo "echo '$NAMES not found' >&2"
        fi
    else
        if [[ -e $NAMES ]]; then
            local temp=$(mktemp /tmp/shoved.XXXXX)
            trap "rm -f $temp" RETURN
            cp $NAMES $temp
            awk "\$1 != \"$1\"" <$temp >$NAMES
        fi
        echo "$1 $2" >>$NAMES
        echo "echo ' $1  $2'"
    fi
}

shoved::version() {
    echo $VERSION
}

shoved::enter() {
    if [[ ${SHOVED_HELPER:-} != "" ]]; then
        $SHOVED_HELPER enter
    fi
}

# $1 = printf template to create cd/pushd/popd command
# $2 = unresolved target directory, or none if not required

_move() {
    local command
    if [[ $2 != "" ]]; then
        target="$(_resolve "$2")"
        if [[ $target == __ERROR__ ]]; then
            return
        elif [[ $target == "" ]]; then
            target="$2"
        fi
        command="$(printf "$1" "$target")"
    else
        command=$1
    fi
    # echo "$command >/dev/null && dirs -v | sed -n '1s/0 *//p'"
    echo "$command >/dev/null && dirs | sed 's/^/ /' && eval \"\$(shoved enter)\""
}

_resolve() {
    local target
    if [[ ${SHOVED_HELPER:-} != "" ]]; then
        target=$($SHOVED_HELPER resolve $1)
        if [[ $? != 0 ]]; then
            echo __ERROR__
            return
        elif [[ $target != "" ]]; then
            echo "$target"
            return
        fi
    fi
    target=$(awk "\$1 == \"$1\" { print \$2; exit(0) }" <$NAMES)
    if [[ $target != "" ]]; then
        echo "$target"
    fi
}

command="$1"
shift

if [[ $command =~ ^(chdir|enter|exch|name|pushpop|setup|version)$ ]]; then
    shoved::$command "$@"
else
    echo "echo 'Invalid command: $command' >&2; false"
fi

