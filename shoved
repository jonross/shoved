#!/bin/bash

set -euo pipefail

NAMES=~/.shoved.names
VERSION=0.4.0

##########  external functions  ########################################################################################

# Output alias definitions for shoved commands

shoved::setup() {
    cat <<\!
        d()  { eval "$(shoved chdir "${1:-}")"; }
        dl() { eval "dirs -v"; }
        dn() { eval "$(shoved name "${1:-}" $(dirs))"; }
        dp() { eval "$(shoved pushpop "${1:-}")"; }
        dx() { eval "$(shoved exch)"; }
        ds() { eval "$(shoved setup)"; }
!
    for i in $(seq 0 9); do
        echo "alias $i='d $i'"
    done
}

# Output commands to change directories, or print the working directory
#
#   $1 = optional destination or alias

shoved::chdir() {
    if [[ $1 == "" ]]; then
        set -- $HOME
    fi
    if [[ $1 =~ ^[0-9]$ ]]; then
        # d N does pushd +N
        shoved::_goto "pushd +$1" ""
    else
        shoved::_goto "cd %s" $1
    fi
}

# Output commands to exchange the top two directories in the stack

shoved::exch() {
    shoved::_goto "pushd" ""
}

# Output commands to pushd to another directory (if specified)
# or pop the directory stack (if not specified)
#
#   $1 = optional destination or alias

shoved::pushpop() {
    if [[ $1 == "" ]]; then
        shoved::_goto "popd" ""
    else
        shoved::_goto "pushd %s" $1
    fi
}

# Output commands to define a new alias (if specified) to the working directory,
# or list all the aliases (if not specified)
#
#   $1 = optional alias

shoved::name() {
    if [[ $1 == "" ]]; then
        if [[ -e $NAMES ]]; then
            local maxlen=$(awk '{ x = x > length($1) ? x : length($1) } END { print x }' <$NAMES)
            echo "awk '{ printf(\" %-${maxlen}s  %s\\n\", \$1, \$2) }' <$NAMES | sort -k1"
        else
            echo "echo '$NAMES not found' >&2"
        fi
    else
        if [[ -e $NAMES ]]; then
            local temp=$(mktemp /tmp/shoved.XXXXX)
            trap "rm -f $temp" RETURN
            cp $NAMES $temp
            awk "\$1 != \"$1\"" <$temp >$NAMES
        fi
        echo "$1 $2" >>$NAMES
        echo "echo ' $1  $2'"
    fi
}

# Show the installed version of shoved

shoved::version() {
    echo $VERSION
}

##########  internal functions  ########################################################################################

# Run a user hook, if the helper script is set
#
#   $1 = hook name
#   $2.. = optional args

shoved::_hook() {
    if [[ ${SHOVED_HELPER:-} != "" ]]; then
        if [[ -e $SHOVED_HELPER ]]; then
            $SHOVED_HELPER $1
        else
            echo "SHOVED_HELPER is set to $SHOVED_HELPER, but the file can't be opened" >&2
        fi
    fi
}

# Output a command to actually move to the target directory and run user hooks
#
#   $1 = printf template to create cd/pushd/popd command
#   $2 = unresolved target directory, or none if not required

shoved::_goto() {
    local command
    if [[ $2 != "" ]]; then
        if ! target="$(shoved::_resolve "$2")"; then
            # resolve failed, use as-is
            target="$2"
        fi
        command="$(printf "$1" "$target")"
    else
        command=$1
    fi
    echo "
        $command >/dev/null && \
        dirs -v | sed -n '1s/^ *[0-9]* */ /p' && \
        eval \"\$(shoved _hook enter)\"
    "
}

# Resolve a directory alias, or if no alias, just output the directory
#
#   $1 = destination directory or alias

shoved::_resolve() {
    local dest="$1"
    local actual
    if ! actual=$(shoved::_hook resolve $dest); then
        # user hook failed, use as-is
        echo "$dest"
    elif [[ $actual != "" ]]; then
        # user hook resolved an alias
        echo "$actual"
    elif [[ ! -e $NAMES ]]; then
        # no aliases file
        echo "$dest"
    elif ! awk -v ex=0 "\$1 == \"$dest\" { print \$2; ex = 0 } END { exit ex }" <$NAMES; then
        # not found in aliases file
        echo "$dest"
    fi
}

########################################################################################################################

command="$1"
shift

if [[ $command =~ ^(chdir|exch|name|pushpop|setup|version|_hook)$ ]]; then
    shoved::$command "$@"
else
    echo "echo 'Invalid command: $command' >&2; false"
fi

